#!/usr/bin/env python2.4

#
# $Id: sudoku 617 2006-03-27 16:32:49Z suriya $
#

import sys

def all(S):
    for i in S:
        if not i:
            return False
    return True

L = xrange(9)

class SudokuSquare:
    def __init__(self):
        """__conflict is the list of squares which conflict with this
        square. For example, if this square contains 3, the other squares
        which conflict with this square cannot contain 3"""
        self.__done = False
        self.__candidates = set(L)
        self.__value = None
        self.__conflict = set()
    def set(self, value):
        self.__done = True
        self.__candidates = set()
        self.__value = value
        for i in self.__conflict:
            i.remove(value)
    def addConflict(self, c):
        if (c is not self):
            self.__conflict.add(c)
    def remove(self, i):
        """i cannot be a part if this SudokuSquare. Therefore remove it
        from __candidates"""
        self.__candidates.discard(i)
    def done(self):
        return self.__done
    def canBeDone(self):
        return (not self.__done) and (len(self.__candidates) == 1)
    def doIt(self):
        assert self.canBeDone()
        self.set(self.__candidates.pop())
    def __str__(self):
        if self.__done:
            return str(self.__value + 1)
        else:
            return '.'

class SudokuGrid:
    def __init__(self):
        self.__grid = [[ SudokuSquare() for i in L ] for j in L ]
        for (row, col) in ((i,j) for i in L for j in L):
            _srow = row - (row % 3)
            _scol = col - (col % 3)
            for i in (self.__grid[r][c]
                    for r in L
                    for c in L
                    if ((r == row) or
                        (c == col) or
                        ((_srow <= r < _srow+3) and (_scol <= c < _scol+3)))):
                self.__grid[row][col].addConflict(i)

    def done(self):
        return all(self.__grid[i][j].done() for i in L for j in L)

    def set(self, row, col, value):
        """[row][col] = value. This means that other elements in the same
        row and column and small grid cannot contain value."""
        self.__grid[row][col].set(value)

    def readGrid(self, stream):
        for row, rstring in zip(L, stream):
            for col, value in zip(L, rstring):
                if (value != '.'):
                    self.set(row, col, ord(value) - ord('1'))

    def solve(self):
        changed = True
        while changed:
            changed = False
            for (row,col) in ((i,j) for i in L for j in L):
                square = self.__grid[row][col]
                if square.canBeDone():
                    square.doIt()
                    changed = True

    def __str__(self):
        _s = ''
        return '\n'.join(''.join(str(self.__grid[row][col]) for col in L) for row in L)

s = SudokuGrid()
s.readGrid(sys.stdin)
s.solve()
print s
print 'Solved:', s.done()

# vim:ts=4:sw=4:et:
