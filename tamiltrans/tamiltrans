#!/usr/bin/env python2.5

# $Id: tamiltrans 1311 2010-02-15 16:20:15Z suriya $
#
# (C) 2005 Suriya Subramanian <suriya At cs utexas edu>


# The logic of the function parseString() is explain here.
#
# We begin at state 0. We examine the character at the front of the string
# to be converted. We change state as specified in the finite automaton
# below.
# 
# Legend: The character that is examined is
# V  - Vowel
# NV - Not a vowel
# C  - Consonant
# NC - not a consonant
# 
# 
#                         print Uyirmei (C + V)
#    +-------------------------------------------------------------+
#    |                                                             |
#    |            print Uyir (V)                                   |
#    |     +------------------------+                              |
#    |     |                        |                              |
#    |     |                        |                              |
#    |     |             V          |                              |
#    +-----+----> 0 -----------> 1 -+                              |
#    |     |        \                                              |
#    |     |         \                                             |
#    |     |       NV \                                            |
#    |     |           \                C              V           |
#    |     |            +------> 2 ----------> 3 -------------> 4 -+
#    |     |                       \             \
#    |     |                        \             \
#    |     |                      NC \             \ NV
#    |     |                          \             \
#    |     |                           +-----> 6     +--------> 5 -+
#    |     |                                   |                   |
#    |     |         print non-tamil           |                   |
#    |     +-----------------------------------+                   |
#    |                                                             |
#    |                                                             |
#    |                     print Mei (C)                           |
#    +-------------------------------------------------------------+
#
# This is an example of how the string "tamiz." is processed.
# 
# state   string       transition    new-state    new-string
#   0      tamiz.      NV               2          tamiz. 
#   2      tamiz.      C                3           amiz. 
#   3       amiz.      V                4            miz. 
#   4        miz.      print ta         0            miz. 
#   0        miz.      NV               2            miz. 
#   2        miz.      C                3             iz. 
#   3         iz.      V                4              z. 
#   4          z.      print mi         0              z. 
#   0          z.      NV               2              z. 
#   2          z.      C                3               . 
#   3           .      NV               5               . 
#   5           .      print z          0               . 
#   0           .      NV               2               . 
#   2           .      NC               6               . 
#   6           .      print .          0                 
#   0          ""
#   THE END

import sys
import os
import string
import optparse
import datetime

def conditional(a, b, c):
	'return a ? b : c'
	if (a):
		return b
	else:
		return c

class TamilTable:
	fileheader = \
	'%% DO NOT EDIT THIS FILE\n' \
	'%% This file was automatically generated by tamiltrans $Revision: 1311 $\n' \
	'%% tamiltrans is (C) 2005 Suriya Subramanian <suriya At cs utexas edu>\n' \
	'%% and is released under the GNU GPL version 2\n' \
	'%% The translation was initated by %s on %s.\n' \
	'%% The command line arguments were: \n' \
	'%%     %s\n\n'
	debug = False
	hypenate = False
	def debugMessage(self, message):
		if (self.debug):
			sys.stderr.write(message + '\n')
	def numberToCode(self, number):
		return r"\symbol{'%s}" % number
	def listToCode(self, list):
		return string.join(map(self.numberToCode, list), '')
	def uyirToCode(self, uyir):
		self.debugMessage('uyirToCode: ' + uyir)
		return self.listToCode(self.vowels[uyir])
	def meiToCode(self, mei):
		self.debugMessage('meiToCode: ' + mei)
		return self.listToCode(self.consonants[mei]['.'])
	def uyirmeiToCode(self, mei, uyir):
		self.debugMessage('uyirmeiToCode: %s %s' % (mei, uyir))
		hypenstring = conditional(self.hypenate, r'\-', '')
		return hypenstring + self.listToCode(self.consonants[mei][uyir])
	def aithamToCode(self):
		return self.listToCode(self.aitham)
	def sriToCode(self):
		return self.listToCode(self.SRI)
	def beginsWith(self, haystack, needle):
		'returns an integer indicating whether haystack begins with needle'
		# print 'beginsWith: haystack: %s, needle: %s' % (haystack, needle)
		return haystack[:len(needle)] == needle
	def findVowel(self, s):
		self.debugMessage('findVowel: %s' % s)
		for v in self.vowelkeys:
			if (self.beginsWith(s, v)):
				s = s[len(v):]
				self.debugMessage('found vowel: %s %s'  %(s, v)) 
				return (s, v)
		return (s, None)
	def findConsonant(self, s):
		self.debugMessage('findConsonant: %s' % s)
		for c in self.consonantkeys:
			if (self.beginsWith(s, c)):
				s = s[len(c):]
				self.debugMessage('found consonant: %s %s'  %(s, c)) 
				return (s, c)
		return (s, None)
	def findAitham(self, s):
		self.debugMessage('findAitham: %s' % s)
		if (self.beginsWith(s, self.aithamkey)):
			s = s[len(self.aithamkey):]
			self.debugMessage('found aitham: %s %s' % (s, self.aithamkey))
			return (s, self.aithamkey)
		else:
			return (s, None)
	def findSRI(self, s):
		self.debugMessage('findSRI: %s' % s)
		if (self.beginsWith(s, self.SRIkey)):
			s = s[len(self.SRIkey):]
			self.debugMessage('found SRI: %s %s' % (s, self.SRIkey))
			return (s, self.SRIkey)
		else:
			return (s, None)

	def parseString(self, s):
		# Implements a simple finite automaton explained at the beginning
		# of this file.
		output = ''
		state = 0
		v = ''
		c = ''
		while 1:
			if (0 == state):
				if (0 == len(s)):
					break
				# Handle special cases aitham and SRI here, instead of
				# having separate states in the finite automaton
				(s, sri) = self.findSRI(s)
				if (sri):
					output += self.sriToCode()
					continue
				(s, aitham) = self.findAitham(s)
				if (aitham):
					output += self.aithamToCode()
					continue
				(s, v) = self.findVowel(s)
				state = conditional(v, 1, 2)
			elif (1 == state):
				output += self.uyirToCode(v)
				state = 0
			elif (2 == state):
				(s, c) = self.findConsonant(s)
				state = conditional(c, 3, 6)
			elif (3 == state):
				(s, v) = self.findVowel(s)
				state = conditional(v, 4, 5)
			elif (4 == state):
				output += self.uyirmeiToCode(c, v)
				state = 0
			elif (5 == state):
				output += self.meiToCode(c)
				state = 0
			elif (6 == state):
				output += s[0]
				s = s[1:]
				state = 0
			else:
				print 'Error'
				break
		return r'{\TM %s}' % output

	def parseFileStream(self, cmdline, inputfile, outputfile):
		outputfile.write(self.fileheader % \
			(os.getenv('USER'), str(datetime.datetime.today()), cmdline))
		beginstring = r'\tamil{'
		endstring = r'}'
		content = inputfile.read()
		insidetamil = False
		while (len(content)):
			searchstr = conditional(insidetamil, endstring, beginstring)
			index = content.find(searchstr)
			if (index != -1):
				# found a match
				processedstr = content[:index]
				if (insidetamil):
					processedstr = self.parseString(processedstr)
				outputfile.write(processedstr)
				# move the read pointer to the right
				content = content[index + len(searchstr):]
				# change state
				insidetamil = not insidetamil
			else:
				if (insidetamil):
					sys.stderr.write('Tamil section does not end\n')
				outputfile.write(content)
				content = ''
		
	aitham = [ '241' ]
	aithamkey = 'q'
	SRI = [ '202' ]
	SRIkey = 'SRI'
	vowels = {
         'a':  [ '253' ],
         'A':  [ '254' ],
         'i':  [ '255' ],
         'I':  [ '256' ],
	     'u':  [ '257' ],
	     'U':  [ '260' ],
	     'e':  [ '261' ],
	     'E':  [ '262' ],
	     'ai': [ '263' ],
	     'o':  [ '023' ],
	     'O':  [ '265' ],
	     'au': [ '266' ],
}
	consonants = {
'k':   { 'a':  [ '002' ],
         'A':  [ '002', '016' ],
         'i':  [ '002', '242' ],
         'I':  [ '002', '243' ],
	     'u':  [ '314' ],
	     'U':  [ '334' ],
	     'e':  [ '246', '002' ],
	     'E':  [ '247', '002' ],
	     'ai': [ '177', '002' ],
	     'o':  [ '246', '002', '016' ],
	     'O':  [ '247', '002', '016' ],
	     'au': [ '246', '002', '252' ],
         '.':  [ '354' ],		 
       },
'~N':  { 'a':  [ '003' ],
         'A':  [ '003', '016' ],
         'i':  [ '003', '242' ],
         'I':  [ '003', '243' ],
	     'u':  [ '231' ],
	     'U':  [ '233' ],
	     'e':  [ '246', '003' ],
	     'E':  [ '247', '003' ],
	     'ai': [ '177', '003' ],
	     'o':  [ '246', '003', '016' ],
	     'O':  [ '247', '003', '016' ],
	     'au': [ '246', '003', '252' ],
         '.':  [ '355' ],		 
       },
'ch':  { 'a':  [ '004' ],
         'A':  [ '004', '016' ],
         'i':  [ '004', '242' ],
         'I':  [ '004', '243' ],
	     'u':  [ '315' ],
	     'U':  [ '335' ],
	     'e':  [ '246', '004' ],
	     'E':  [ '247', '004' ],
	     'ai': [ '177', '004' ],
	     'o':  [ '246', '004', '016' ],
	     'O':  [ '247', '004', '016' ],
	     'au': [ '246', '004', '252' ],
         '.':  [ '356' ],		 
       },
'~n':  { 'a':  [ '006' ],
         'A':  [ '006', '016' ],
         'i':  [ '006', '242' ],
         'I':  [ '006', '243' ],
	     'u':  [ '224' ],
	     'U':  [ '234' ],
	     'e':  [ '246', '006' ],
	     'E':  [ '247', '006' ],
	     'ai': [ '177', '006' ],
	     'o':  [ '246', '006', '016' ],
	     'O':  [ '247', '006', '016' ],
	     'au': [ '246', '006', '252' ],
         '.':  [ '357' ],		 
       },
'T':   { 'a':  [ '007' ],
         'A':  [ '007', '016' ],
         'i':  [ '312' ],
         'I':  [ '313' ],
	     'u':  [ '316' ],
	     'U':  [ '336' ],
	     'e':  [ '246', '007' ],
	     'E':  [ '247', '007' ],
	     'ai': [ '177', '007' ],
	     'o':  [ '246', '007', '016' ],
	     'O':  [ '247', '007', '016' ],
	     'au': [ '246', '007', '252' ],
         '.':  [ '360' ],		 
       },
'N':   { 'a':  [ '275' ],
         'A':  [ '275', '016' ],
         'i':  [ '275', '242' ],
         'I':  [ '275', '243' ],
	     'u':  [ '317' ],
	     'U':  [ '031' ],
	     'e':  [ '246', '275' ],
	     'E':  [ '247', '275' ],
	     'ai': [ '177', '275' ],
	     'o':  [ '246', '275', '016' ],
	     'O':  [ '247', '275', '016' ],
	     'au': [ '246', '275', '252' ],
         '.':  [ '361' ],		 
       },
't':   { 'a':  [ '011' ],
         'A':  [ '011', '016' ],
         'i':  [ '011', '242' ],
         'I':  [ '011', '243' ],
	     'u':  [ '320' ],
	     'U':  [ '340' ],
	     'e':  [ '246', '011' ],
	     'E':  [ '247', '011' ],
	     'ai': [ '177', '011' ],
	     'o':  [ '246', '011', '016' ],
	     'O':  [ '247', '011', '016' ],
	     'au': [ '246', '011', '252' ],
         '.':  [ '362' ],		 
       },
'n':   { 'a':  [ '012' ],
         'A':  [ '012', '016' ],
         'i':  [ '012', '242' ],
         'I':  [ '012', '243' ],
	     'u':  [ '321' ],
	     'U':  [ '341' ],
	     'e':  [ '246', '012' ],
	     'E':  [ '247', '012' ],
	     'ai': [ '177', '012' ],
	     'o':  [ '246', '012', '016' ],
	     'O':  [ '247', '012', '016' ],
	     'au': [ '246', '012', '252' ],
         '.':  [ '363' ],		 
       },
'p':   { 'a':  [ '300' ],
         'A':  [ '300', '016' ],
         'i':  [ '300', '242' ],
         'I':  [ '300', '243' ],
	     'u':  [ '322' ],
	     'U':  [ '342' ],
	     'e':  [ '246', '300' ],
	     'E':  [ '247', '300' ],
	     'ai': [ '177', '300' ],
	     'o':  [ '246', '300', '016' ],
	     'O':  [ '247', '300', '016' ],
	     'au': [ '246', '300', '252' ],
         '.':  [ '364' ],		 
       },
'm':   { 'a':  [ '301' ],
         'A':  [ '301', '016' ],
         'i':  [ '301', '242' ],
         'I':  [ '301', '243' ],
	     'u':  [ '323' ],
	     'U':  [ '343' ],
	     'e':  [ '246', '301' ],
	     'E':  [ '247', '301' ],
	     'ai': [ '177', '301' ],
	     'o':  [ '246', '301', '016' ],
	     'O':  [ '247', '301', '016' ],
	     'au': [ '246', '301', '252' ],
         '.':  [ '365' ],		 
       },
'y':   { 'a':  [ '302' ],
         'A':  [ '302', '016' ],
         'i':  [ '302', '242' ],
         'I':  [ '302', '243' ],
	     'u':  [ '324' ],
	     'U':  [ '344' ],
	     'e':  [ '246', '302' ],
	     'E':  [ '247', '302' ],
	     'ai': [ '177', '302' ],
	     'o':  [ '246', '302', '016' ],
	     'O':  [ '247', '302', '016' ],
	     'au': [ '246', '302', '252' ],
         '.':  [ '366' ],		 
       },
'r':   { 'a':  [ '303' ],
         'A':  [ '303', '016' ],
         'i':  [ '303', '242' ],
         'I':  [ '303', '243' ],
	     'u':  [ '325' ],
	     'U':  [ '345' ],
	     'e':  [ '246', '303' ],
	     'E':  [ '247', '303' ],
	     'ai': [ '177', '303' ],
	     'o':  [ '246', '303', '016' ],
	     'O':  [ '247', '303', '016' ],
	     'au': [ '246', '303', '252' ],
         '.':  [ '367' ],		 
       },
'l':   { 'a':  [ '304' ],
         'A':  [ '304', '016' ],
         'i':  [ '304', '242' ],
         'I':  [ '304', '243' ],
	     'u':  [ '326' ],
	     'U':  [ '032' ],
	     'e':  [ '246', '304' ],
	     'E':  [ '247', '304' ],
	     'ai': [ '177', '304' ],
	     'o':  [ '246', '304', '016' ],
	     'O':  [ '247', '304', '016' ],
	     'au': [ '246', '304', '252' ],
         '.':  [ '034' ],		 
       },
'v':   { 'a':  [ '305' ],
         'A':  [ '305', '016' ],
         'i':  [ '305', '242' ],
         'I':  [ '305', '243' ],
	     'u':  [ '327' ],
	     'U':  [ '347' ],
	     'e':  [ '246', '305' ],
	     'E':  [ '247', '305' ],
	     'ai': [ '177', '305' ],
	     'o':  [ '246', '305', '016' ],
	     'O':  [ '247', '305', '016' ],
	     'au': [ '246', '305', '252' ],
         '.':  [ '371' ],		 
       },
'z':   { 'a':  [ '035' ],
         'A':  [ '035', '016' ],
         'i':  [ '035', '242' ],
         'I':  [ '035', '243' ],
	     'u':  [ '037' ],
	     'U':  [ '350' ],
	     'e':  [ '246', '035' ],
	     'E':  [ '247', '035' ],
	     'ai': [ '177', '035' ],
	     'o':  [ '246', '035', '016' ],
	     'O':  [ '247', '035', '016' ],
	     'au': [ '246', '035', '252' ],
         '.':  [ '372' ],		 
       },
'L':   { 'a':  [ '307' ],
         'A':  [ '307', '016' ],
         'i':  [ '307', '242' ],
         'I':  [ '307', '243' ],
	     'u':  [ '331' ],
	     'U':  [ '351' ],
	     'e':  [ '246', '307' ],
	     'E':  [ '247', '307' ],
	     'ai': [ '177', '307' ],
	     'o':  [ '246', '307', '016' ],
	     'O':  [ '247', '307', '016' ],
	     'au': [ '246', '307', '252' ],
         '.':  [ '373' ],		 
       },
'R':   { 'a':  [ '025' ],
         'A':  [ '025', '016' ],
         'i':  [ '025', '242' ],
         'I':  [ '025', '243' ],
	     'u':  [ '332' ],
	     'U':  [ '352' ],
	     'e':  [ '246', '025' ],
	     'E':  [ '247', '025' ],
	     'ai': [ '177', '025' ],
	     'o':  [ '246', '025', '016' ],
	     'O':  [ '247', '025', '016' ],
	     'au': [ '246', '025', '252' ],
         '.':  [ '374' ],		 
       },
'^n':  { 'a':  [ '013' ],
         'A':  [ '013', '016' ],
         'i':  [ '013', '242' ],
         'I':  [ '013', '243' ],
	     'u':  [ '333' ],
	     'U':  [ '353' ],
	     'e':  [ '246', '013' ],
	     'E':  [ '247', '013' ],
	     'ai': [ '177', '013' ],
	     'o':  [ '246', '013', '016' ],
	     'O':  [ '247', '013', '016' ],
	     'au': [ '246', '013', '252' ],
         '.':  [ '375' ],		 
       },
'j':   { 'a':  [ '203' ],
         'A':  [ '203', '016' ],
         'i':  [ '203', '242' ],
         'I':  [ '203', '243' ],
	     'u':  [ '203', '244' ],
	     'U':  [ '203', '245' ],
	     'e':  [ '246', '203' ],
	     'E':  [ '247', '203' ],
	     'ai': [ '177', '203' ],
	     'o':  [ '246', '203', '016' ],
	     'O':  [ '247', '203', '016' ],
	     'au': [ '246', '203', '252' ],
         '.':  [ '210' ],
       },
's':   { 'a':  [ '205' ],
         'A':  [ '205', '016' ],
         'i':  [ '205', '242' ],
         'I':  [ '205', '243' ],
	     'u':  [ '205', '244' ],
	     'U':  [ '205', '245' ],
	     'e':  [ '246', '205' ],
	     'E':  [ '247', '205' ],
	     'ai': [ '177', '205' ],
	     'o':  [ '246', '205', '016' ],
	     'O':  [ '247', '205', '016' ],
	     'au': [ '246', '205', '252' ],
         '.':  [ '212' ],
       },
'h':   { 'a':  [ '206' ],
         'A':  [ '206', '016' ],
         'i':  [ '206', '242' ],
         'I':  [ '206', '243' ],
	     'u':  [ '206', '244' ],
	     'U':  [ '206', '245' ],
	     'e':  [ '246', '206' ],
	     'E':  [ '247', '206' ],
	     'ai': [ '177', '206' ],
	     'o':  [ '246', '206', '016' ],
	     'O':  [ '247', '206', '016' ],
	     'au': [ '246', '206', '252' ],
         '.':  [ '213' ],
       },
'sh':  { 'a':  [ '204' ],
         'A':  [ '204', '016' ],
         'i':  [ '204', '242' ],
         'I':  [ '204', '243' ],
	     'u':  [ '204', '244' ],
	     'U':  [ '204', '245' ],
	     'e':  [ '246', '204' ],
	     'E':  [ '247', '204' ],
	     'ai': [ '177', '204' ],
	     'o':  [ '246', '204', '016' ],
	     'O':  [ '247', '204', '016' ],
	     'au': [ '246', '204', '252' ],
         '.':  [ '211' ],
       },
'ksh': { 'a':  [ '207' ],
         'A':  [ '207', '016' ],
         'i':  [ '207', '242' ],
         'I':  [ '207', '243' ],
	     'u':  [ '207', '244' ],
	     'U':  [ '207', '245' ],
	     'e':  [ '246', '207' ],
	     'E':  [ '247', '207' ],
	     'ai': [ '177', '207' ],
	     'o':  [ '246', '207', '016' ],
	     'O':  [ '247', '207', '016' ],
	     'au': [ '246', '207', '252' ],
         '.':  [ '214' ],
       },
}
	consonants['g'] = consonants['k']
	consonants['D'] = consonants['T']
	consonants['d'] = consonants['t']
	consonants['dh'] = consonants['t']
	consonants['th'] = consonants['t']
	consonants['b'] = consonants['p']
	vowelkeys = vowels.keys()
	vowelkeys.sort(lambda x, y: len(y) - len(x))
	consonantkeys = consonants.keys()
	consonantkeys.sort(lambda x, y: len(y) - len(x))

# Command line flags
version_str = """\
%prog version $Revision: 1311 $
Copyright 2005 Suriya Subramanian <suriya At cs utexas edu>
This program is free software; you may redistribute it under the terms of
the GNU General Public License.  This program has absolutely no warranty."""
cmdline = optparse.OptionParser(version=version_str)
cmdline.add_option('-i', '--in', dest='inputfile', default='-',
	help='read input from FILE', metavar='FILE')
cmdline.add_option('-o', '--out', dest='outputfile', default='-',
	help='write output to FILE', metavar='FILE')
cmdline.add_option('-y', '--hypenate', action='store_true',
	dest='hypenate', default=False,
	help='automatically add hypenation patterns')    
cmdline.add_option('-v', '--verbose', action='store_true',
	dest='verbose', default=False,
	help='print debug messages to stderr')
(options, args) = cmdline.parse_args()
if ('-' == options.inputfile):
	inputstream = sys.stdin
else:
	inputstream = open(options.inputfile, 'r')
if ('-' == options.outputfile):
	outputstream = sys.stdout
else:
	outputstream = open(options.outputfile, 'w')

# Call the parser
parser = TamilTable()
parser.debug = options.verbose
parser.hypenate = options.hypenate
parser.parseFileStream(string.join(sys.argv), inputstream, outputstream)
